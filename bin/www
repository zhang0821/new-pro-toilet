#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-first:server');
var http = require('http');

/*
*引入postgre
*/

var pgdb=require('../pgsql/postgre');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);


/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/**
 * Listen on provided port, on all network interfaces.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
server.listen(port);

/**
 * some io socket operater
*/ 

io.sockets.on('connection', function (socket) { 
	  //io.sockets.emit('news',"你已经成果连接ws server");
	socket.emit('news',"你已经成果连接ws server");
	socket.on('pageRes',function(data){
console.log("客户端返回的是时间数据"+data);
/**/
      if(data){
        var resTime=new Date().getTime();
console.log("第二次时间记录"+resTime);
        var tbname='smoke_para',condition='\'111\'',values=resTime;
        pgdb.getInserResult(tbname,condition,values,function(results){
          if(results){
            console.log("插入成功！");
          }
        });
      }

    });

}); 



/**
*mqtt嵌入
**/

var mqtt = require('mqtt');
var client = mqtt.connect('mqtt://localhost:1883');
client.on('connect', function () {
	console.log('成功连接mqtt服务器');
	client.subscribe('topics',{qos:2});
});

var mqtt_reicev_time=0;
//该框架时间测试：收到的Mqtt的时间戳为一个数据的最初时间，nodejs发送到服务器再到服务器收到后返回再记录一次时间，渲染的时间单独计算（ajs框架的优势）
client.on('message', function (topic, message) {
    switch(topic) {
        case 'topics':
          var ssInfo;
        	var message_sql='\'111\'';
          var sql="select * from smoke_para a where a.dev_eui = "+message_sql+"limit 1";
           pgdb.getQueryResult(sql,function(results){
             if(results){
              if(results.rowCount > 0){
                  results.rows.forEach(function(item){
              			ssInfo={
                			'state':item['smoke_status'],
                			'dev_eui':item['dev_eui']
              			};
                  });
                }
              console.log("www_"+JSON.stringify(ssInfo));
              io.sockets.emit('news',ssInfo);
               }
             });


 var resTime=new Date().getTime();
        var tbname='smoke_para',condition='\'111\'',values=resTime;
        pgdb.getInserResult(tbname,condition,values,function(results){
          if(results){
            console.log("插入成功！");
          }
        });



            break;
        case 'close':
            client.end();
            break;
	}
 }); 


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
