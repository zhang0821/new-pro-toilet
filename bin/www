#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('node-first:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '80');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.


server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
 */

var server = http.createServer(app);
var io = require('socket.io')(server);
server.listen(port);

/**
 * some io socket operater
*/ 

io.sockets.on('connection', function (socket) { 
	io.sockets.emit('news',"你已经成果连接ws server");
    /*setInterval(function(){
      pgdb.getQueryResult(operatorStr,function(results){
        if(globalInfo!=results){
          io.sockets.emit('news',"this setinterval 's return"+results);
        }
      });
    },10000);*/

}); 



/**
*mqtt嵌入
**/

var mqtt = require('mqtt');
var client = mqtt.connect('mqtt://localhost:1883');
client.on('connect', function () {
	console.log('成功连接mqtt服务器');
	client.subscribe('topics',{qos:2});
});

client.on('message', function (topic, message) {
    switch(topic) {
        case 'topics':
            console.log("this mqtt's info"+message.toString());
	    //client.publish('nodejsTopics', 'this is  nodejs'+new Date().getTime());
	    io.sockets.emit('news',"this mqtt's info"+message.toString());
            break;
        case 'close':
            client.end();
            break;
	}
 }); 














/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
